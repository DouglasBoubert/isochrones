isochrones
=======

``isochrones`` is a package built to simplify common tasks that are
often done with stellar model grids, such as simulating synthetic
stellar populations or estimating the physical properties of a star
given photometric or spectroscopic observations.  While it comes
packaged with three different model grids (Padova, BASTI, and
Dartmouth), it can be easily extended to a user-defined grid.  It uses
`emcee <http://dan.iel.fm/emcee/current/>`_ for MCMC sampling.

Note that the first time you import any of the pre-packaged model
grids, it will download the required data to a ``~/.isochrones``
folder.

I welcome community feedback to help improve this tool.  The code is
hosted at `GitHub <http://github.com/timothydmorton/isochrones>`_,
please feel free to contribute. 

Basic Usage
---------

To find, for example, what a stellar model grid predicts for stellar
radius at a given mass, log(age), and metallicity:

.. code-block:: 

    >>> from isochrones.dartmouth import Dartmouth_Isochrone
    >>> dar = Dartmouth_Isochrone()
    >>> dar.radius(1.0, 9.7, 0.0) #M/Msun, log10(age), Fe/H
        1.0160123968403469

If you want to estimate physical parameters for a star for which you have measured spectroscopic properties, you would do something like the following:

.. code-block:: python

    from isochrone import StarModel
    from isochrones.dartmouth import Dartmouth_Isochrone

    #spectroscopic properties (value, uncertainty)
    Teff = (5770, 80)
    logg = (4.44, 0.08)
    feh = (0.00, 0.10)
    
    dar = Dartmouth_Isochrone()

    model  = StarModel(dar, Teff=Teff, logg=logg, feh=feh)
    model.fit_mcmc()

The model now has a property :attr:`StarModel.samples` that contains
all of the samples generated by the MCMC chain---or more specifically,
it contains both the samples generated directly from the chain and the
corresponding values of all the model properties (e.g. radius,
synthetic photometry, etc.) evaluated at each chain link.  If you have
installed the handy `triangle <https://github.com/dfm/triangle.py>`_
module installed, you can also visualize the results:

.. code-block:: python

   model.triangle()


    
