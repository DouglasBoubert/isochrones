#!/usr/bin/env python
"""
Launches batch job running starfit on every folder listed in a file

Uses slurm job array by default, but could be reconfigured
to another batch scheduler if desired.
"""
from __future__ import print_function, division

import os,re,sys,os.path,shutil,glob
import argparse
import numpy as np
import subprocess

if __name__=='__main__':
    parser = argparse.ArgumentParser(description='Fire up a batch starfit job')

    parser.add_argument('file', type=str)
    parser.add_argument('-n', '--nsplit', type=int, default=None,
                        help='Total number of jobs to split into.  Will default to length of file.')
    parser.add_argument('--ntasks_per_node', type=int, default=20,
                        help='number of cores to use per node.')
    
    parser.add_argument('-t', '--time', type=float, default=5,
                        help='approximate time that one line will take, in minutes')
    parser.add_argument('extra', nargs=argparse.REMAINDER)
    
    args = parser.parse_args()
    
    runfolder = os.path.abspath('{}-run'.format(args.file))
    if not os.path.exists(runfolder):
        os.makedirs(runfolder)

    listfile = os.path.abspath(args.file)

    num_lines = sum(1 for line in open(listfile))
    nsplit = num_lines if args.nsplit is None else args.nsplit

    n_nodes = nsplit // (args.ntasks_per_node)
    if nsplit % args.ntasks_per_node != 0:
        n_nodes += 1
    
    num_per_job = num_lines // nsplit
    if num_lines % nsplit != 0:
        num_per_job += 1
    tot_minutes = args.time*num_per_job
    time_string = '{:02.0f}:{:02.0f}:00'.format(tot_minutes//60, tot_minutes % 60)

            
    scriptfile = os.path.join(runfolder,'run.sh')

    fout = open(scriptfile, 'w')
    fout.write('#!/bin/bash\n')
    fout.write('#SBATCH -J starfit-{}\n'.format(args.file))
    fout.write('#SBATCH -N {}\n'.format(n_nodes))
    fout.write('#SBATCH --ntasks-per-node={}\n'.format(args.ntasks_per_node))
    fout.write('#SBATCH -t {}\n'.format(time_string))
    fout.write('#SBATCH -o {}/%A_%a.out\n'.format(runfolder))
    fout.write('#SBATCH -e {}/%A_%a.err\n'.format(runfolder))
    fout.write('\n')
    fout.write('awk "NR % {} == ${{SLURM_ARRAY_TASK_ID}}" {} | '.format(nsplit, listfile) +
               'xargs starfit --threads {}'.format(args.ntasks_per_node))
    for arg in args.extra:
        fout.write('{} '.format(arg))
    fout.write('\n')

    fout.close()

    #execute slurm job array
    subprocess.call('sbatch --array=0-{} {}'.format(nsplit, scriptfile), shell=True)
