#!/usr/bin/env python
"""
A command-line program to fit a StarModel using the isochrones package

Input argument is name of a folder that contains a file
called ``star.ini``, which is a config file containing all
the observed properties of the star on which the model should
be conditioned.  Multiple folder names can also be passed.

"""
from __future__ import division, print_function

import matplotlib
matplotlib.use('agg')

import matplotlib.pyplot as plt

import os, os.path, re, sys
import logging
import time

import argparse

from isochrones.starfit import starfit

if __name__=='__main__':

    parser = argparse.ArgumentParser(description='Fit physical properties of a star conditioned on observed quantities.')

    parser.add_argument('folders', nargs='*', default=['.'])
    parser.add_argument('--binary', action='store_true')
    parser.add_argument('--triple', action='store_true')
    parser.add_argument('--all', action='store_true')
    parser.add_argument('--models', default='dartmouth')
    parser.add_argument('--emcee', action='store_true')
    parser.add_argument('--no_local_fehprior', action='store_true')
    parser.add_argument('--plot_only', action='store_true')
    parser.add_argument('-o','--overwrite', action='store_true')
    parser.add_argument('-v','--verbose', action='store_true')

    args = parser.parse_args()

    try:
        import pymultinest
    except ImportError:
        args.emcee = True

    if args.models=='dartmouth':
        from isochrones.dartmouth import Dartmouth_Isochrone
        ichrone = Dartmouth_Isochrone()
    elif args.models=='padova':
        from isochrones.padova import Padova_Isochrone
        ichrone = Padova_Isochrone()
    elif args.models=='basti':
        from isochrones.basti import Basti_Isochrone
        ichrone = Basti_Isochrone()
    else:
        raise ValueError('Unknown stellar models: {}'.format(args.models))

    if args.all:
        multiplicities = ['single', 'binary', 'triple']
    elif args.binary:
        multiplicities = ['binary']
    elif args.triple:
        multiplicities = ['triple']
    else:
        multiplicities = ['single']
    
    nstars = {'single':1,
              'binary':2,
              'triple':3}

    logger = None #dummy
    
    for i,folder in enumerate(args.folders):
        print('{} of {}: {} ({})'.format(i+1, len(args.folders), folder, mult))
        logger = starfit(folder, multiplicities=multiplicities, models=args.models,
                        use_emcee=args.emcee, plot_only=plot_only, overwrite=args.overwrite,
                        verbose=args.verbose, logger=logger)
        

